(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{340:function(a,s,e){"use strict";e.r(s);var t=e(0),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"快速上手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[a._v("#")]),a._v(" 快速上手")]),a._v(" "),e("p",[a._v("目前，Kubernetes 支持在多种环境下的安装，包括本地主机（Fedora）、云服务（Google GAE、AWS 等）。然而最快速体验 Kubernetes 的方式显然是本地通过 Docker 的方式来启动相关进程。")]),a._v(" "),e("p",[a._v("下图展示了在单节点使用 Docker 快速部署一套 Kubernetes 的拓扑。")]),a._v(" "),e("p",[e("img",{attrs:{src:"_images/k8s-singlenode-docker.png",alt:"在 Docker 中启动 Kubernetes"}})]),a._v(" "),e("p",[a._v("Kubernetes 依赖 Etcd 服务来维护所有主节点的状态。")]),a._v(" "),e("h2",{attrs:{id:"启动-etcd-服务。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-etcd-服务。"}},[a._v("#")]),a._v(" 启动 Etcd 服务。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker run --net"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("host -d gcr.io/google_containers/etcd:2.0.9 /usr/local/bin/etcd --addr"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1:4001 --bind-addr"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0:4001 --data-dir"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/var/etcd/data\n")])])]),e("h2",{attrs:{id:"启动主节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动主节点"}},[a._v("#")]),a._v(" 启动主节点")]),a._v(" "),e("p",[a._v("启动 kubelet。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker run --net"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("host -d -v /var/run/docker.sock:/var/run/docker.sock  gcr.io/google_containers/hyperkube:v0.17.0 /hyperkube kubelet --api_servers"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("http://localhost:8080 --v"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" --address"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0 --enable_server --hostname_override"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1 --config"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/etc/kubernetes/manifests\n")])])]),e("h2",{attrs:{id:"启动服务代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动服务代理"}},[a._v("#")]),a._v(" 启动服务代理")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker run -d --net"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("host --privileged gcr.io/google_containers/hyperkube:v0.17.0 /hyperkube proxy --master"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("http://127.0.0.1:8080 --v"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),e("h2",{attrs:{id:"测试状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试状态"}},[a._v("#")]),a._v(" 测试状态")]),a._v(" "),e("p",[a._v("在本地访问 "),e("code",[a._v("8080")]),a._v(" 端口，可以获取到如下的结果：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1:8080\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"paths"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/api"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/api/v1beta1"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/api/v1beta2"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/api/v1beta3"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/healthz"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/healthz/ping"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/logs/"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/metrics"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/static/"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/swagger-ui/"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/swaggerapi/"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/validate"')]),a._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/version"')]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("h2",{attrs:{id:"查看服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看服务"}},[a._v("#")]),a._v(" 查看服务")]),a._v(" "),e("p",[a._v("所有服务启动后，查看本地实际运行的 Docker 容器，有如下几个。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("CONTAINER ID        IMAGE                                        COMMAND                CREATED             STATUS              PORTS               NAMES\nee054db2516c        gcr.io/google_containers/hyperkube:v0.17.0   "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/hyperkube schedule   2 days ago          Up 1 days                               k8s_scheduler.509f29c9_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_e97037f5\n3b0f28de07a2        gcr.io/google_containers/hyperkube:v0.17.0   "')]),a._v("/hyperkube apiserve   "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" days ago          Up "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" days                               k8s_apiserver.245e44fa_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_6ab5c23d\n2eaa44ecdd8e        gcr.io/google_containers/hyperkube:v0.17.0   "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/hyperkube controll   2 days ago          Up 1 days                               k8s_controller-manager.33f83d43_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_1a60106f\n30aa7163cbef        gcr.io/google_containers/hyperkube:v0.17.0   "')]),a._v("/hyperkube proxy --   "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" days ago          Up "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" days                               jolly_davinci\na2f282976d91        gcr.io/google_containers/pause:0.8.0         "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/pause"')]),a._v("               "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" days ago          Up "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" days                               k8s_POD.e4cc795_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_e8085b1f\nc060c52acc36        gcr.io/google_containers/hyperkube:v0.17.0   "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/hyperkube kubelet    2 days ago          Up 1 days                               serene_nobel\ncc3cd263c581        gcr.io/google_containers/etcd:2.0.9          "')]),a._v("/usr/local/bin/etcd   "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" days ago          Up "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" days                               happy_turing\n")])])]),e("p",[a._v("这些服务大概分为三类：主节点服务、工作节点服务和其它服务。")]),a._v(" "),e("h3",{attrs:{id:"主节点服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主节点服务"}},[a._v("#")]),a._v(" 主节点服务")]),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("apiserver")]),a._v(" 是整个系统的对外接口，提供 RESTful 方式供客户端和其它组件调用；")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("scheduler")]),a._v(" 负责对资源进行调度，分配某个 pod 到某个节点上；")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("controller-manager")]),a._v(" 负责管理控制器，包括 endpoint-controller（刷新服务和 pod 的关联信息）和 replication-controller（维护某个 pod 的复制为配置的数值）。")])])]),a._v(" "),e("h3",{attrs:{id:"工作节点服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作节点服务"}},[a._v("#")]),a._v(" 工作节点服务")]),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("kubelet")]),a._v(" 是工作节点执行操作的 agent，负责具体的容器生命周期管理，根据从数据库中获取的信息来管理容器，并上报 pod 运行状态等；")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("proxy")]),a._v(" 为 pod 上的服务提供访问的代理。")])])]),a._v(" "),e("h3",{attrs:{id:"其它服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其它服务"}},[a._v("#")]),a._v(" 其它服务")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Etcd 是所有状态的存储数据库；")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("gcr.io/google_containers/pause:0.8.0")]),a._v(" 是 Kubernetes 启动后自动 pull 下来的测试镜像。")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);