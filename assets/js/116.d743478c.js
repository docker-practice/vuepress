(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{316:function(e,a,s){"use strict";s.r(a);var t=s(0),v=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"删除本地镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除本地镜像"}},[e._v("#")]),e._v(" 删除本地镜像")]),e._v(" "),s("p",[e._v("如果要删除本地的镜像，可以使用 "),s("code",[e._v("docker image rm")]),e._v(" 命令，其格式为：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("镜像"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("1")]),e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("镜像"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("2")]),e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("h2",{attrs:{id:"用-id、镜像名、摘要删除镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-id、镜像名、摘要删除镜像"}},[e._v("#")]),e._v(" 用 ID、镜像名、摘要删除镜像")]),e._v(" "),s("p",[e._v("其中，"),s("code",[e._v("<镜像>")]),e._v(" 可以是 "),s("code",[e._v("镜像短 ID")]),e._v("、"),s("code",[e._v("镜像长 ID")]),e._v("、"),s("code",[e._v("镜像名")]),e._v(" 或者 "),s("code",[e._v("镜像摘要")]),e._v("。")]),e._v(" "),s("p",[e._v("比如我们有这么一些镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\nREPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE\ncentos                      latest              0584b3d2cf6d        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("196.5")]),e._v(" MB\nredis                       alpine              501ad78535f0        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21.03")]),e._v(" MB\ndocker                      latest              cf693ec9b5c7        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("105.1")]),e._v(" MB\nnginx                       latest              e43d811ce2f4        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181.5")]),e._v(" MB\n")])])]),s("p",[e._v("我们可以用镜像的完整 ID，也称为 "),s("code",[e._v("长 ID")]),e._v("，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 "),s("code",[e._v("短 ID")]),e._v(" 来删除镜像。"),s("code",[e._v("docker image ls")]),e._v(" 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。")]),e._v(" "),s("p",[e._v("比如这里，如果我们要删除 "),s("code",[e._v("redis:alpine")]),e._v(" 镜像，可以执行：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("501")]),e._v("\nUntagged: redis:alpine\nUntagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d\nDeleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7\nDeleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b\nDeleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23\nDeleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa\nDeleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3\nDeleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7\n")])])]),s("p",[e._v("我们也可以用"),s("code",[e._v("镜像名")]),e._v("，也就是 "),s("code",[e._v("<仓库名>:<标签>")]),e._v("，来删除镜像。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" centos\nUntagged: centos:latest\nUntagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c\nDeleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a\nDeleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38\n")])])]),s("p",[e._v("当然，更精确的是使用 "),s("code",[e._v("镜像摘要")]),e._v(" 删除镜像。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" --digests\nREPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE\nnode                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("214")]),e._v(" MB\n\n$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\nUntagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\n")])])]),s("h2",{attrs:{id:"untagged-和-deleted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#untagged-和-deleted"}},[e._v("#")]),e._v(" Untagged 和 Deleted")]),e._v(" "),s("p",[e._v("如果观察上面这几个命令的运行输出信息的话，你会注意到删除行为分为两类，一类是 "),s("code",[e._v("Untagged")]),e._v("，另一类是 "),s("code",[e._v("Deleted")]),e._v("。我们之前介绍过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。")]),e._v(" "),s("p",[e._v("因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 "),s("code",[e._v("Untagged")]),e._v(" 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 "),s("code",[e._v("Delete")]),e._v(" 行为就不会发生。所以并非所有的 "),s("code",[e._v("docker image rm")]),e._v(" 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。")]),e._v(" "),s("p",[e._v("当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变得非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 "),s("code",[e._v("docker pull")]),e._v(" 看到的层数不一样的原因。")]),e._v(" "),s("p",[e._v("除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。")]),e._v(" "),s("h2",{attrs:{id:"用-docker-image-ls-命令来配合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-docker-image-ls-命令来配合"}},[e._v("#")]),e._v(" 用 docker image ls 命令来配合")]),e._v(" "),s("p",[e._v("像其它可以承接多个实体的命令一样，可以使用 "),s("code",[e._v("docker image ls -q")]),e._v(" 来配合使用 "),s("code",[e._v("docker image rm")]),e._v("，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。")]),e._v(" "),s("p",[e._v("比如，我们需要删除所有仓库名为 "),s("code",[e._v("redis")]),e._v(" 的镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -q redis"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),s("p",[e._v("或者删除所有在 "),s("code",[e._v("mongo:3.2")]),e._v(" 之前的镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -q -f "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("before")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("mongo:3.2"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),s("p",[e._v("充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。")]),e._v(" "),s("h2",{attrs:{id:"centos-rhel-的用户需要注意的事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos-rhel-的用户需要注意的事项"}},[e._v("#")]),e._v(" CentOS/RHEL 的用户需要注意的事项")]),e._v(" "),s("blockquote",[s("p",[e._v("以下内容仅适用于 Docker CE 18.09 以下版本，在 Docker CE 18.09 版本中默认使用的是 "),s("code",[e._v("overlay2")]),e._v(" 驱动。")])]),e._v(" "),s("p",[s("s",[e._v("在 Ubuntu/Debian 上有 "),s("code",[e._v("UnionFS")]),e._v(" 可以使用，如 "),s("code",[e._v("aufs")]),e._v(" 或者 "),s("code",[e._v("overlay2")]),e._v("，而 CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用 "),s("code",[e._v("devicemapper")]),e._v(" 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 "),s("code",[e._v("devicemapper")]),e._v("，但是为了简化配置，其 "),s("code",[e._v("devicemapper")]),e._v(" 是跑在一个稀疏文件模拟的块设备上，也被称为 "),s("code",[e._v("loop-lvm")]),e._v("。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 "),s("code",[e._v("loop-lvm")]),e._v(" 的做法非常不好，其稳定性、性能更差，无论是日志还是 "),s("code",[e._v("docker info")]),e._v(" 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 "),s("code",[e._v("devicemapper")]),e._v(" 驱动做存储层的做法，这类做法也被称为配置 "),s("code",[e._v("direct-lvm")]),e._v("。")])]),e._v(" "),s("p",[s("s",[e._v("除了前面说到的问题外，"),s("code",[e._v("devicemapper")]),e._v(" + "),s("code",[e._v("loop-lvm")]),e._v(" 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 "),s("code",[e._v("/var/lib/docker/devicemapper/devicemapper/data")]),e._v(" 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。")])]),e._v(" "),s("p",[s("s",[e._v("所以对于 CentOS/RHEL 的用户来说，在没有办法使用 "),s("code",[e._v("UnionFS")]),e._v(" 的情况下，一定要配置 "),s("code",[e._v("direct-lvm")]),e._v(" 给 "),s("code",[e._v("devicemapper")]),e._v("，无论是为了性能、稳定性还是空间利用率。")])]),e._v(" "),s("p",[s("s",[s("em",[e._v("或许有人注意到了 CentOS 7 中存在被 backports 回来的 "),s("code",[e._v("overlay")]),e._v(" 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);