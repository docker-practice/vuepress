(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{302:function(t,s,a){"use strict";a.r(s);var e=a(28),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"copy-复制文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-复制文件"}},[t._v("#")]),t._v(" COPY 复制文件")]),t._v(" "),a("p",[t._v("格式：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("COPY [--chown=<user>:<group>] <源路径>... <目标路径>")])]),t._v(" "),a("li",[a("code",[t._v('COPY [--chown=<user>:<group>] ["<源路径1>",... "<目标路径>"]')])])]),t._v(" "),a("p",[t._v("和 "),a("code",[t._v("RUN")]),t._v(" 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。")]),t._v(" "),a("p",[a("code",[t._v("COPY")]),t._v(" 指令将从构建上下文目录中 "),a("code",[t._v("<源路径>")]),t._v(" 的文件/目录复制到新的一层的镜像内的 "),a("code",[t._v("<目标路径>")]),t._v(" 位置。比如：")]),t._v(" "),a("div",{staticClass:"language-docker extra-class"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" package.json /usr/src/app/\n")])])]),a("p",[a("code",[t._v("<源路径>")]),t._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),a("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("filepath.Match")]),a("OutboundLink")],1),t._v(" 规则，如：")]),t._v(" "),a("div",{staticClass:"language-docker extra-class"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" hom* /mydir/\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" hom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(".txt /mydir/\n")])])]),a("p",[a("code",[t._v("<目标路径>")]),t._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),a("code",[t._v("WORKDIR")]),t._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),t._v(" "),a("p",[t._v("此外，还需要注意一点，使用 "),a("code",[t._v("COPY")]),t._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")]),t._v(" "),a("p",[t._v("在使用该指令的时候还可以加上 "),a("code",[t._v("--chown=<user>:<group>")]),t._v(" 选项来改变文件的所属用户及所属组。")]),t._v(" "),a("div",{staticClass:"language-docker extra-class"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=55"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mygroup files* /mydir/\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=bin files* /mydir/\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=1 files* /mydir/\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("11 files* /mydir/\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);