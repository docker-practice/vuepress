(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{387:function(t,e,o){"use strict";o.r(e);var r=o(42),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"docker-容器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器"}},[t._v("#")]),t._v(" Docker 容器")]),t._v(" "),o("p",[t._v("镜像（"),o("code",[t._v("Image")]),t._v("）和容器（"),o("code",[t._v("Container")]),t._v("）的关系，就像是面向对象程序设计中的 "),o("code",[t._v("类")]),t._v(" 和 "),o("code",[t._v("实例")]),t._v(" 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),t._v(" "),o("p",[t._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 "),o("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[t._v("命名空间"),o("OutboundLink")],1),t._v("。因此容器可以拥有自己的 "),o("code",[t._v("root")]),t._v(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),t._v(" "),o("p",[t._v("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 "),o("strong",[t._v("容器存储层")]),t._v("。")]),t._v(" "),o("p",[t._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),t._v(" "),o("p",[t._v("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 "),o("RouterLink",{attrs:{to:"/data_management/volume.html"}},[t._v("数据卷（Volume）")]),t._v("、或者 "),o("RouterLink",{attrs:{to:"/data_management/bind-mounts.html"}},[t._v("绑定宿主目录")]),t._v("，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")],1),t._v(" "),o("p",[t._v("数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。")])])}),[],!1,null,null,null);e.default=_.exports}}]);