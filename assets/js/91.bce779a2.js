(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{292:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"使用-etcdctl-v2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-etcdctl-v2"}},[t._v("#")]),t._v(" 使用 etcdctl v2")]),t._v(" "),s("p",[s("code",[t._v("etcdctl")]),t._v(" 是一个命令行客户端，它能提供一些简洁的命令，供用户直接跟 "),s("code",[t._v("etcd")]),t._v(" 服务打交道，而无需基于 "),s("code",[t._v("HTTP API")]),t._v(" 方式。这在某些情况下将很方便，例如用户对服务进行测试或者手动修改数据库内容。我们也推荐在刚接触 "),s("code",[t._v("etcd")]),t._v(" 时通过 "),s("code",[t._v("etcdctl")]),t._v(" 命令来熟悉相关的操作，这些操作跟 "),s("code",[t._v("HTTP API")]),t._v(" 实际上是对应的。")]),t._v(" "),s("p",[s("code",[t._v("etcd")]),t._v(" 项目二进制发行包中已经包含了 "),s("code",[t._v("etcdctl")]),t._v(" 工具，没有的话，可以从 "),s("a",{attrs:{href:"https://github.com/etcd-io/etcd/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("github.com/etcd-io/etcd/releases"),s("OutboundLink")],1),t._v(" 下载。")]),t._v(" "),s("p",[s("code",[t._v("etcdctl")]),t._v(" 支持如下的命令，大体上分为数据库操作和非数据库操作两类，后面将分别进行解释。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ etcdctl -h\nNAME:\n   etcdctl - A simple command line client for etcd.\n\nUSAGE:\n   etcdctl [global options] command [command options] [arguments...]\n\nVERSION:\n   2.0.0-rc.1\n\nCOMMANDS:\n   backup\tbackup an etcd directory\n   mk\t\tmake a new key with a given value\n   mkdir\tmake a new directory\n   rm\t\tremove a key\n   rmdir\tremoves the key if it is an empty directory or a key-value pair\n   get\t\tretrieve the value of a key\n   ls\t\tretrieve a directory\n   set\t\tset the value of a key\n   setdir\tcreate a new or existing directory\n   update\tupdate an existing key with a given value\n   updatedir\tupdate an existing directory\n   watch\twatch a key for changes\n   exec-watch\twatch a key for changes and exec an executable\n   member\tmember add, remove and list subcommands\n   help, h\tShows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --debug\t\t\toutput cURL commands which can be used to reproduce the request\n   --no-sync\t\t\tdon't synchronize cluster information before sending request\n   --output, -o 'simple'\toutput response in the given format (`simple` or `json`)\n   --peers, -C \t\t\ta comma-delimited list of machine addresses in the cluster (default: \"127.0.0.1:4001\")\n   --cert-file \t\t\tidentify HTTPS client using this SSL certificate file\n   --key-file \t\t\tidentify HTTPS client using this SSL key file\n   --ca-file \t\t\tverify certificates of HTTPS-enabled servers using this CA bundle\n   --help, -h\t\t\tshow help\n   --version, -v\t\tprint the version\n")])])]),s("h3",{attrs:{id:"数据库操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[t._v("#")]),t._v(" 数据库操作")]),t._v(" "),s("p",[t._v("数据库操作围绕对键值和目录的 CRUD （符合 REST 风格的一套操作：Create）完整生命周期的管理。")]),t._v(" "),s("p",[t._v("etcd 在键的组织上采用了层次化的空间结构（类似于文件系统中目录的概念），用户指定的键可以为单独的名字，如 "),s("code",[t._v("testkey")]),t._v("，此时实际上放在根目录 "),s("code",[t._v("/")]),t._v(" 下面，也可以为指定目录结构，如 "),s("code",[t._v("cluster1/node2/testkey")]),t._v("，则将创建相应的目录结构。")]),t._v(" "),s("p",[s("em",[t._v("注：CRUD 即 Create, Read, Update, Delete，是符合 REST 风格的一套 API 操作。")])]),t._v(" "),s("h4",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("指定某个键的值。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" /testdir/testkey "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v("\nHello world\n")])])]),s("p",[t._v("支持的选项包括：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--ttl "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t\t\t该键值的超时时间（单位为秒），不配置（默认为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("）则永不超时\n--swap-with-value value 若该键现在的值是 value，则进行设置操作\n--swap-with-index "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t若该键现在的索引值是指定索引，则进行设置操作\n")])])]),s("h4",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get")]),t._v(" "),s("p",[t._v("获取指定键的值。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" testkey hello\nhello\n$ etcdctl update testkey world\nworld\n")])])]),s("p",[t._v("当键不存在时，则会报错。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl get testkey2\nError:  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(": Key not found "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/testkey2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--sort\t对结果进行排序\n--consistent 将请求发给主节点，保证获取内容的一致性\n")])])]),s("h4",{attrs:{id:"update"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" update")]),t._v(" "),s("p",[t._v("当键存在时，更新值内容。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" testkey hello\nhello\n$ etcdctl update testkey world\nworld\n")])])]),s("p",[t._v("当键不存在时，则会报错。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl update testkey2 world\nError:  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(": Key not found "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/testkey2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--ttl "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t超时时间（单位为秒），不配置（默认为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("）则永不超时\n")])])]),s("h4",{attrs:{id:"rm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[t._v("#")]),t._v(" rm")]),t._v(" "),s("p",[t._v("删除某个键值。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" testkey\n")])])]),s("p",[t._v("当键不存在时，则会报错。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" testkey2\nError:  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(": Key not found "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/testkey2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--dir\t\t如果键是个空目录或者键值对则删除\n--recursive\t\t删除目录和所有子键\n--with-value \t检查现有的值是否匹配\n--with-index "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t检查现有的 index 是否匹配\n")])])]),s("h4",{attrs:{id:"mk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mk"}},[t._v("#")]),t._v(" mk")]),t._v(" "),s("p",[t._v("如果给定的键不存在，则创建一个新的键值。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl mk /testdir/testkey "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v("\nHello world\n")])])]),s("p",[t._v("当键存在的时候，执行该命令会报错，例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" testkey "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v("\nHello world\n$ ./etcdctl mk testkey "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v("\nError:  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("105")]),t._v(": Key already exists "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/testkey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--ttl "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t超时时间（单位为秒），不配置（默认为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("）则永不超时\n")])])]),s("h4",{attrs:{id:"mkdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mkdir"}},[t._v("#")]),t._v(" mkdir")]),t._v(" "),s("p",[t._v("如果给定的键目录不存在，则创建一个新的键目录。例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" testdir\n")])])]),s("p",[t._v("当键目录存在的时候，执行该命令会报错，例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" testdir\n$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" testdir\nError:  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("105")]),t._v(": Key already exists "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/testdir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--ttl "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t超时时间（单位为秒），不配置（默认为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("）则永不超时\n")])])]),s("h4",{attrs:{id:"setdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setdir"}},[t._v("#")]),t._v(" setdir")]),t._v(" "),s("p",[t._v("创建一个键目录，无论存在与否。")]),t._v(" "),s("p",[t._v("支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--ttl "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t超时时间（单位为秒），不配置（默认为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("）则永不超时\n")])])]),s("h4",{attrs:{id:"updatedir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updatedir"}},[t._v("#")]),t._v(" updatedir")]),t._v(" "),s("p",[t._v("更新一个已经存在的目录。\n支持的选项为")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--ttl "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t超时时间（单位为秒），不配置（默认为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("）则永不超时\n")])])]),s("h4",{attrs:{id:"rmdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rmdir"}},[t._v("#")]),t._v(" rmdir")]),t._v(" "),s("p",[t._v("删除一个空目录，或者键值对。")]),t._v(" "),s("p",[t._v("若目录不空，会报错")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" /dir/testkey hi\nhi\n$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rmdir")]),t._v(" /dir\nError:  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("108")]),t._v(": Directory not empty "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/dir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h4",{attrs:{id:"ls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ls"}},[t._v("#")]),t._v(" ls")]),t._v(" "),s("p",[t._v("列出目录（默认为根目录）下的键或者子目录，默认不显示子目录中内容。")]),t._v(" "),s("p",[t._v("例如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ ./etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" testkey "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi'")]),t._v("\nhi\n$ ./etcdctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" dir/test "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\nhello\n$ ./etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n/testkey\n/dir\n$ ./etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dir")]),t._v("\n/dir/test\n")])])]),s("p",[t._v("支持的选项包括")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--sort\t将输出结果排序\n--recursive\t如果目录下有子目录，则递归输出其中的内容\n-p\t\t对于输出为目录，在最后添加 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 进行区分\n")])])]),s("h3",{attrs:{id:"非数据库操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非数据库操作"}},[t._v("#")]),t._v(" 非数据库操作")]),t._v(" "),s("h4",{attrs:{id:"backup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#backup"}},[t._v("#")]),t._v(" backup")]),t._v(" "),s("p",[t._v("备份 etcd 的数据。")]),t._v(" "),s("p",[t._v("支持的选项包括")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--data-dir \t\tetcd 的数据目录\n--backup-dir \t备份到指定路径\n")])])]),s("h4",{attrs:{id:"watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[t._v("#")]),t._v(" watch")]),t._v(" "),s("p",[t._v("监测一个键值的变化，一旦键值发生更新，就会输出最新的值并退出。")]),t._v(" "),s("p",[t._v("例如，用户更新 testkey 键值为 Hello world。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" testkey\nHello world\n")])])]),s("p",[t._v("支持的选项包括")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--forever\t\t一直监测，直到用户按 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("CTRL+C"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 退出\n--after-index "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t在指定 index 之前一直监测\n--recursive\t\t返回所有的键值和子键值\n")])])]),s("h4",{attrs:{id:"exec-watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec-watch"}},[t._v("#")]),t._v(" exec-watch")]),t._v(" "),s("p",[t._v("监测一个键值的变化，一旦键值发生更新，就执行给定命令。")]),t._v(" "),s("p",[t._v("例如，用户更新 testkey 键值。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl exec-watch testkey -- "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" -c "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),t._v("\ndefault.etcd\nDocumentation\netcd\netcdctl\netcd-migrate\nREADME-etcdctl.md\nREADME.md\n")])])]),s("p",[t._v("支持的选项包括")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--after-index "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\t在指定 index 之前一直监测\n--recursive\t\t返回所有的键值和子键值\n")])])]),s("h4",{attrs:{id:"member"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#member"}},[t._v("#")]),t._v(" member")]),t._v(" "),s("p",[t._v("通过 list、add、remove 命令列出、添加、删除 etcd 实例到 etcd 集群中。")]),t._v(" "),s("p",[t._v("例如本地启动一个 etcd 服务实例后，可以用如下命令进行查看。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ etcdctl member list\nce2a822cea30bfca: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("peerURLs")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http://localhost:2380,http://localhost:7001 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("clientURLs")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http://localhost:2379,http://localhost:4001\n")])])]),s("h3",{attrs:{id:"命令选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令选项"}},[t._v("#")]),t._v(" 命令选项")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("--debug")]),t._v("\t\t\t输出 cURL 命令，显示执行命令的时候发起的请求")]),t._v(" "),s("li",[s("code",[t._v("--no-sync")]),t._v("\t\t\t发出请求之前不同步集群信息")]),t._v(" "),s("li",[s("code",[t._v("--output, -o 'simple'")]),t._v("\t输出内容的格式 ("),s("code",[t._v("simple")]),t._v(" 为原始信息，"),s("code",[t._v("json")]),t._v(" 为进行json格式解码，易读性好一些)")]),t._v(" "),s("li",[s("code",[t._v("--peers, -C")]),t._v('\t\t\t指定集群中的同伴信息，用逗号隔开 (默认为: "127.0.0.1:4001")')]),t._v(" "),s("li",[s("code",[t._v("--cert-file")]),t._v(" \t\t\tHTTPS 下客户端使用的 SSL 证书文件")]),t._v(" "),s("li",[s("code",[t._v("--key-file")]),t._v("\t\t\tHTTPS 下客户端使用的 SSL 密钥文件")]),t._v(" "),s("li",[s("code",[t._v("--ca-file")]),t._v(" \t\t\t服务端使用 HTTPS 时，使用 CA 文件进行验证")]),t._v(" "),s("li",[s("code",[t._v("--help, -h")]),t._v("\t\t\t显示帮助命令信息")]),t._v(" "),s("li",[s("code",[t._v("--version, -v")]),t._v("\t\t打印版本信息")])])])}),[],!1,null,null,null);a.default=r.exports}}]);