(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{309:function(a,e,t){"use strict";t.r(e);var s=t(0),v=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"volume-定义匿名卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume-定义匿名卷"}},[a._v("#")]),a._v(" VOLUME 定义匿名卷")]),a._v(" "),t("p",[a._v("格式为：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v('VOLUME ["<路径1>", "<路径2>"...]')])]),a._v(" "),t("li",[t("code",[a._v("VOLUME <路径>")])])]),a._v(" "),t("p",[a._v("之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),t("code",[a._v("Dockerfile")]),a._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")]),a._v(" "),t("div",{staticClass:"language-docker extra-class"},[t("pre",{pre:!0,attrs:{class:"language-docker"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("VOLUME")]),a._v(" /data\n")])])]),t("p",[a._v("这里的 "),t("code",[a._v("/data")]),a._v(" 目录就会在运行时自动挂载为匿名卷，任何向 "),t("code",[a._v("/data")]),a._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker run -d -v mydata:/data xxxx\n")])])]),t("p",[a._v("在这行命令中，就使用了 "),t("code",[a._v("mydata")]),a._v(" 这个命名卷挂载到了 "),t("code",[a._v("/data")]),a._v(" 这个位置，替代了 "),t("code",[a._v("Dockerfile")]),a._v(" 中定义的匿名卷的挂载配置。")])])}),[],!1,null,null,null);e.default=v.exports}}]);