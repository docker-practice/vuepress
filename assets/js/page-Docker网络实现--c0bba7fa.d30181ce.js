(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{610:function(s,a,n){"use strict";n.r(a);var t=n(3),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"docker-网络实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络实现"}},[s._v("#")]),s._v(" Docker 网络实现")]),s._v(" "),n("AdSenseTitle"),s._v(" "),n("p",[s._v("Docker 的网络实现其实就是利用了 Linux 上的网络命名空间和虚拟网络设备（特别是 veth pair）。建议先熟悉了解这两部分的基本概念再阅读本章。")]),s._v(" "),n("h2",{attrs:{id:"基本原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本原理"}},[s._v("#")]),s._v(" 基本原理")]),s._v(" "),n("p",[s._v("首先，要实现网络通信，机器需要至少一个网络接口（物理接口或虚拟接口）来收发数据包；此外，如果不同子网之间要进行通信，需要路由机制。")]),s._v(" "),n("p",[s._v("Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。\nLinux 通过在内核中进行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多。")]),s._v(" "),n("p",[s._v("Docker 容器网络就利用了这项技术。它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通（这样的一对接口叫做 "),n("code",[s._v("veth pair")]),s._v("）。")]),s._v(" "),n("h2",{attrs:{id:"创建网络参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建网络参数"}},[s._v("#")]),s._v(" 创建网络参数")]),s._v(" "),n("p",[s._v("Docker 创建一个容器的时候，会执行如下操作：")]),s._v(" "),n("ul",[n("li",[s._v("创建一对虚拟接口，分别放到本地主机和新容器中；")]),s._v(" "),n("li",[s._v("本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 veth65f9；")]),s._v(" "),n("li",[s._v("容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的命名空间可见；")]),s._v(" "),n("li",[s._v("从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 veth65f9。")])]),s._v(" "),n("p",[s._v("完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络。")]),s._v(" "),n("p",[s._v("可以在 "),n("code",[s._v("docker run")]),s._v(" 的时候通过 "),n("code",[s._v("--net")]),s._v(" 参数来指定容器的网络配置，有4个可选值：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("--net=bridge")]),s._v(" 这个是默认值，连接到默认的网桥。")]),s._v(" "),n("li",[n("code",[s._v("--net=host")]),s._v(" 告诉 Docker 不要将容器网络放到隔离的命名空间中，即不要容器化容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权限。容器进程可以跟主机其它 root 进程一样可以打开低范围的端口，可以访问本地网络服务比如 D-bus，还可以让容器做一些影响整个主机系统的事情，比如重启主机。因此使用这个选项的时候要非常小心。如果进一步的使用 "),n("code",[s._v("--privileged=true")]),s._v("，容器会被允许直接配置主机的网络堆栈。")]),s._v(" "),n("li",[n("code",[s._v("--net=container:NAME_or_ID")]),s._v(" 让 Docker 将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享 IP 地址和端口等网络资源，两者进程可以直接通过 "),n("code",[s._v("lo")]),s._v(" 环回接口通信。")]),s._v(" "),n("li",[n("code",[s._v("--net=none")]),s._v(" 让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置。之后，用户可以自己进行配置。")])]),s._v(" "),n("h2",{attrs:{id:"网络配置细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#网络配置细节"}},[s._v("#")]),s._v(" 网络配置细节")]),s._v(" "),n("p",[s._v("用户使用 "),n("code",[s._v("--net=none")]),s._v(" 后，可以自行配置网络，让容器达到跟平常一样具有访问网络的权限。通过这个过程，可以了解 Docker 配置网络的细节。")]),s._v(" "),n("p",[s._v("首先，启动一个 "),n("code",[s._v("/bin/bash")]),s._v(" 容器，指定 "),n("code",[s._v("--net=none")]),s._v(" 参数。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ docker run -i -t --rm --net"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("none base /bin/bash\nroot@63f36fc01b5f:/"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("在本地主机查找容器的进程 id，并为它创建网络命名空间。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ docker inspect -f "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{.State.Pid}}'")]),s._v(" 63f36fc01b5f\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2778")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("pid")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2778")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /var/run/netns\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ln")]),s._v(" -s /proc/"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v("/ns/net /var/run/netns/"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("检查桥接网卡的 IP 和子网掩码信息。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr show docker0\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(": docker0: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\ninet "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".42.1/16 scope global docker0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 "),n("code",[s._v("docker0")]),s._v("，并启用它")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" A "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" veth peer name B\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" brctl addif docker0 A\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" A up\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网段）和默认网关。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" B netns "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev B name eth0\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" eth0 up\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".42.99/16 dev eth0\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$pid")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" route "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" default via "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".42.1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("以上，就是 Docker 配置网络的具体过程。")]),s._v(" "),n("p",[s._v("当容器结束后，Docker 会清空容器，容器内的 eth0 会随网络命名空间一起被清除，A 接口也被自动从 "),n("code",[s._v("docker0")]),s._v(" 卸载。")]),s._v(" "),n("p",[s._v("此外，用户可以使用 "),n("code",[s._v("ip netns exec")]),s._v(" 命令来在指定网络命名空间中进行配置，从而配置容器内的网络。")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);